// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/vehicles.proto

package vehicles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VehiclesService_AddVehicleModel_FullMethodName         = "/vehicles.VehiclesService/AddVehicleModel"
	VehiclesService_AddVehicle_FullMethodName              = "/vehicles.VehiclesService/AddVehicle"
	VehiclesService_AddController_FullMethodName           = "/vehicles.VehiclesService/AddController"
	VehiclesService_BindControllerToVehicle_FullMethodName = "/vehicles.VehiclesService/BindControllerToVehicle"
)

// VehiclesServiceClient is the client API for VehiclesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehiclesServiceClient interface {
	AddVehicleModel(ctx context.Context, in *AddVehicleModelRequest, opts ...grpc.CallOption) (*AddVehicleModelResponse, error)
	AddVehicle(ctx context.Context, in *AddVehicleRequest, opts ...grpc.CallOption) (*AddVehicleResponse, error)
	AddController(ctx context.Context, in *AddControllerRequest, opts ...grpc.CallOption) (*AddControllerResponse, error)
	BindControllerToVehicle(ctx context.Context, in *BindControllerToVehicleRequest, opts ...grpc.CallOption) (*BindControllerToVehicleResponse, error)
}

type vehiclesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehiclesServiceClient(cc grpc.ClientConnInterface) VehiclesServiceClient {
	return &vehiclesServiceClient{cc}
}

func (c *vehiclesServiceClient) AddVehicleModel(ctx context.Context, in *AddVehicleModelRequest, opts ...grpc.CallOption) (*AddVehicleModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVehicleModelResponse)
	err := c.cc.Invoke(ctx, VehiclesService_AddVehicleModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclesServiceClient) AddVehicle(ctx context.Context, in *AddVehicleRequest, opts ...grpc.CallOption) (*AddVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVehicleResponse)
	err := c.cc.Invoke(ctx, VehiclesService_AddVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclesServiceClient) AddController(ctx context.Context, in *AddControllerRequest, opts ...grpc.CallOption) (*AddControllerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddControllerResponse)
	err := c.cc.Invoke(ctx, VehiclesService_AddController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehiclesServiceClient) BindControllerToVehicle(ctx context.Context, in *BindControllerToVehicleRequest, opts ...grpc.CallOption) (*BindControllerToVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindControllerToVehicleResponse)
	err := c.cc.Invoke(ctx, VehiclesService_BindControllerToVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehiclesServiceServer is the server API for VehiclesService service.
// All implementations must embed UnimplementedVehiclesServiceServer
// for forward compatibility.
type VehiclesServiceServer interface {
	AddVehicleModel(context.Context, *AddVehicleModelRequest) (*AddVehicleModelResponse, error)
	AddVehicle(context.Context, *AddVehicleRequest) (*AddVehicleResponse, error)
	AddController(context.Context, *AddControllerRequest) (*AddControllerResponse, error)
	BindControllerToVehicle(context.Context, *BindControllerToVehicleRequest) (*BindControllerToVehicleResponse, error)
	mustEmbedUnimplementedVehiclesServiceServer()
}

// UnimplementedVehiclesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVehiclesServiceServer struct{}

func (UnimplementedVehiclesServiceServer) AddVehicleModel(context.Context, *AddVehicleModelRequest) (*AddVehicleModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVehicleModel not implemented")
}
func (UnimplementedVehiclesServiceServer) AddVehicle(context.Context, *AddVehicleRequest) (*AddVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVehicle not implemented")
}
func (UnimplementedVehiclesServiceServer) AddController(context.Context, *AddControllerRequest) (*AddControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddController not implemented")
}
func (UnimplementedVehiclesServiceServer) BindControllerToVehicle(context.Context, *BindControllerToVehicleRequest) (*BindControllerToVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindControllerToVehicle not implemented")
}
func (UnimplementedVehiclesServiceServer) mustEmbedUnimplementedVehiclesServiceServer() {}
func (UnimplementedVehiclesServiceServer) testEmbeddedByValue()                         {}

// UnsafeVehiclesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehiclesServiceServer will
// result in compilation errors.
type UnsafeVehiclesServiceServer interface {
	mustEmbedUnimplementedVehiclesServiceServer()
}

func RegisterVehiclesServiceServer(s grpc.ServiceRegistrar, srv VehiclesServiceServer) {
	// If the following call pancis, it indicates UnimplementedVehiclesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VehiclesService_ServiceDesc, srv)
}

func _VehiclesService_AddVehicleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVehicleModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclesServiceServer).AddVehicleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehiclesService_AddVehicleModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclesServiceServer).AddVehicleModel(ctx, req.(*AddVehicleModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclesService_AddVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclesServiceServer).AddVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehiclesService_AddVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclesServiceServer).AddVehicle(ctx, req.(*AddVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclesService_AddController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclesServiceServer).AddController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehiclesService_AddController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclesServiceServer).AddController(ctx, req.(*AddControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehiclesService_BindControllerToVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindControllerToVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehiclesServiceServer).BindControllerToVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehiclesService_BindControllerToVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehiclesServiceServer).BindControllerToVehicle(ctx, req.(*BindControllerToVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VehiclesService_ServiceDesc is the grpc.ServiceDesc for VehiclesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehiclesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vehicles.VehiclesService",
	HandlerType: (*VehiclesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVehicleModel",
			Handler:    _VehiclesService_AddVehicleModel_Handler,
		},
		{
			MethodName: "AddVehicle",
			Handler:    _VehiclesService_AddVehicle_Handler,
		},
		{
			MethodName: "AddController",
			Handler:    _VehiclesService_AddController_Handler,
		},
		{
			MethodName: "BindControllerToVehicle",
			Handler:    _VehiclesService_BindControllerToVehicle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vehicles.proto",
}
